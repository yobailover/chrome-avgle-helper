#!/usr/bin/env bash

DIR_NAME=$(basename `pwd`)
M3U8_FILE="${DIR_NAME}.m3u8"
LIST_FILE="concat.list"
TARGET_FILE="../${DIR_NAME}.mp4"

# ffmpeg binary file
# it will be a path to a binary file in `windows-libs` directory if this script is running in git bash
FFMPEG_BIN="ffmpeg";

#================================
#====   Colorized variables  ====
if [[ -t 1 ]]; then # is terminal?
	COLOR_MODE=`tput colors`;
	if [[ -n "$COLOR_MODE" ]] && [[ "$COLOR_MODE" -ge 8 ]]; then
		BOLD="\x1b[1m";
		RESET="\x1b[0m";

		RED="\x1b[0;31m";
		RED_BOLD="\x1b[1;31m";
		YELLOW_BOLD="\x1b[1;33m";
		GREEN="\x1b[0;32m";
		GREEN_BOLD="\x1b[1;32m";
		BLUE="\x1b[0;34m";
		BLUE_BOLD="\x1b[1;34m";
	fi
fi
#================================
#====   Basic functions  ========
function confirm() {
	local yn;
	while true; do read -p "Confirm (y/n) > " yn
		case $yn in
			Y|Yes|YES|yes|y) return 0 ;;
			N|No|NO|no|n) return 1 ;;
		esac
	done
}
function title() { echo -e "${BLUE_BOLD}# $1 ${RESET}"; }
function finish() { echo -e "\n${GREEN_BOLD}# Finish!${RESET}\n"; exit 0; }
function user_abort() { echo -e "\n${YELLOW_BOLD}# Abort by user!${RESET}\n"; exit 0; }
function warn() { echo -e "${YELLOW_BOLD} warning: ${1} ${RESET}"; }
function success() { echo -e "${GREEN} success: ${1} ${RESET}"; }
function error() { echo -e "${RED_BOLD}  error: ${RED}$1${RESET}\n"; exit 1; }
#================================

#===========================================
#        M a i n   F u n c t i o n
#===========================================

DIV_LINE="===============================================";
echo -e "\n${DIV_LINE}"
echo -e '                    _      '
echo -e '     /\            | |     '
echo -e '    /  \__   ____ _| | ___ '
echo -e '   / /\ \ \ / / _` | |/ _ \'
echo -e '  / ____ \ V / (_| | |  __/'
echo -e ' /_/    \_\_/ \__, |_|\___|'
echo -e '               __/ |       '
echo -e '              |___/        '
echo -e ''
echo -e '            Update date: 2018-10-30'
echo -e ''
echo -e "${BOLD} 1.Concat seg-*-v1-a1.ts you downloaded from avgle"
echo -e "${BOLD} 2.Convert ts file to mp4 using ffmpeg"
echo -e "${BOLD} 3.Rename mp4 file name according to folder it located"
echo -e "${BOLD} 4.Remove All temporary *.ts files if you don't need them anymore${RESET}"
echo -e "${DIV_LINE}\n"

# ===========================
# Windows User
WIN_USER=false
UNAME_S="$(uname -s)";
if [[ "$UNAME_S" == MINGW* ]] || [[ "$UNAME_S" == CYGWIN* ]]; then
	WIN_USER=true;
fi

# ===========================
# Checking dependencies
[[ -z `which gawk` ]] && error "\"gawk\" is missing! (Ubuntu: sudo apt install gawk)";
[[ -z `which sed` ]] && error "\"sed\" is missing! (Ubuntu: sudo apt install sed)";

WHICH_FFMPEG="$(which "$FFMPEG_BIN" 2>/dev/null)"
if [[ -z "$WHICH_FFMPEG" ]]; then
	if [[ $WIN_USER == true ]]; then
		__DIRNAME="$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)";

		pushd "$__DIRNAME" > /dev/null || error "goto script directory failed!";
		FFMPEG_BIN="$(find windows-libs -type f -name "ffmpeg.exe" | head -n1)";
		if [[ -z "$FFMPEG_BIN" ]]; then
			FIX_IT="(How to fix this error: read windows-libs/README.md)"
			error "ffmpeg.exe is missng in directory \"windows-libs\". $FIX_IT";
		fi
		FFMPEG_BIN="$__DIRNAME/$FFMPEG_BIN";
		popd;
	else
		error "\"$FFMPEG_BIN\" is missing! (Ubuntu: sudo apt install $FFMPEG_BIN)";
	fi
fi

# ===========================
# Checking path
[[ -z "$DIR_NAME" ]] && error "current directory name is empty (dangerous)!";

# ===========================
# Getting max number
MAX_NUMBE=$(ls | tr ' ' '\n' | gawk '
	/^seg-([0-9]+)-v1-a1.ts$/ {
		if(match($1, /seg-([0-9]+)-v1-a1.ts/, result)) {
			v = result[1] - 0;
			if(v > max)
				max = v;
		}
	}
	END {print max ? max : "NULL"}')
[[ "$MAX_NUMBE" == "NULL" ]] && error "could not find any seg-*-v1-a1.ts you download from avgle";
title "Found avgle ts files, max ts file number is: ${MAX_NUMBE}";

# ===========================
# Compare max number with expected
EXPECTED="$1";
if [[ -n "$EXPECTED" ]]; then
	[[ "$EXPECTED" != "$MAX_NUMBE" ]] && error "expected max number of video fragments is: ${EXPECTED}";
	title "expected max number of video fragments is same with actual";
fi

# ===========================
# Valid all ts files is under folder
FILES_OK=true
for (( i=1 ; i<=$MAX_NUMBE ; i++ )) do
	FNAME="seg-${i}-v1-a1.ts";
	if [[ ! -f "$FNAME" ]]; then
		warn "$FNAME is missing!";
		FILES_OK=false
	fi
done
[[ "$FILES_OK" == "false" ]] && error "*.ts files are not completed!"
title "Confirmed all *.ts files are existed"

# ===========================
# Generate concat list file for ffmpeg
title "Generating list file for ffmpeg ...";
[[ -f "$M3U8_FILE" ]] || error "m3u8 play list file \"$M3U8_FILE\" is not existed!";

if [[ -e "$LIST_FILE" ]]; then
	echo -e "\nList file ($LIST_FILE) is existed! Do you want to delete it and continue?";
	confirm || user_abort;
	rm -f $LIST_FILE || error "could not delete ${LIST_FILE}";
fi

sed -e '/^#/d' -e 's:^http.*mp4/:file :g' "$M3U8_FILE" > "$LIST_FILE" \
	|| error "generate list file failed!";

echo -e "";
title "Concat file $LIST_FILE generated"

# ===========================
# Converting .ts file
title "Converting ts file to mp4 files ..."
if [[ -e "$TARGET_FILE" ]]; then
	echo -e "\nTarget file is existed! do you want to delete and continue? ($TARGET_FILE)";
	confirm || user_abort;
	rm -f $TARGET_FILE || error "could not delete ${TARGET_FILE}";
fi

# -f concat can be performed in ffmpeg, reduce disk usage and time
# -c copy is equal to -acodec copy -vcodec copy, we just don't want to re-encode the file
# -bsf: Bitstream Filters  -bsf:a audio stream filter
# aac_adtstoasc: https://ffmpeg.org/ffmpeg-bitstream-filters.html#aac_005fadtstoasc
#   Convert MPEG-2/4 AAC ADTS to an MPEG-4 Audio Specific Configuration bitstream.
#   Reference from repo: https://github.com/mywarr/chrome-avgle-helper
"$FFMPEG_BIN" -f concat -i "${LIST_FILE}" -bsf:a aac_adtstoasc -c copy "${TARGET_FILE}" -loglevel error \
	|| error "ffmpeg convert response exception!"
title "Converted ${LIST_FILE} file to ${TARGET_FILE}";

# ===========================
# Deleting files
echo -e "\nDo you want to delete temporarty files (included *.d.ts)?";
confirm || finish

title "Deleting seg-*-v1-a1.ts files ..."
for (( i=1 ; i<=$MAX_NUMBE ; i++ )) do rm -f "seg-${i}-v1-a1.ts"; done
rm -f "${LIST_FILE}";
title "All temporary files are deleted!"

finish
